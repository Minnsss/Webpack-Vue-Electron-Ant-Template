module.exports=function(e){var n={};function r(o){if(n[o])return n[o].exports;var t=n[o]={i:o,l:!1,exports:{}};return e[o].call(t.exports,t,t.exports,r),t.l=!0,t.exports}return r.m=e,r.c=n,r.d=function(e,n,o){r.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,n){if(1&n&&(e=r(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var t in e)r.d(o,t,function(n){return e[n]}.bind(null,t));return o},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="",r(r.s=0)}({"./builder/devServerConfig.js":
/*!************************************!*\
  !*** ./builder/devServerConfig.js ***!
  \************************************/
/*! no static exports found */function(module,exports){eval("/**\n* Tip:    devServer的配置\n* Author: haoluo\n* Data:   2020-02-25\n* Tips:   使用以下命令启动各环境配置,npm run dev [dev|test|release]\n**/\n\nlet envList = ['dev', 'test', 'release'];\nlet currentEnv = 'release';\nlet envArg = process.argv[2];\n\nif (envArg && envList.includes(envArg)) {\n    currentEnv = envArg;\n}\n//导出服务配置\nmodule.exports = {\n    url: '127.0.0.1',\n    port: 8098,\n    // 运行环境\n    currentEnv: currentEnv,\n    // 调试完打开浏览器\n    devComplateOpened: true\n};\n\n//# sourceURL=webpack:///./builder/devServerConfig.js?")},"./node_modules/_cookie@0.4.0@cookie/index.js":
/*!****************************************************!*\
  !*** ./node_modules/_cookie@0.4.0@cookie/index.js ***!
  \****************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n\n\n/**\n * Module exports.\n * @public\n */\n\nexports.parse = parse;\nexports.serialize = serialize;\n\n/**\n * Module variables.\n * @private\n */\n\nvar decode = decodeURIComponent;\nvar encode = encodeURIComponent;\nvar pairSplitRegExp = /; */;\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {}\n  var opt = options || {};\n  var pairs = str.split(pairSplitRegExp);\n  var dec = opt.decode || decode;\n\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i];\n    var eq_idx = pair.indexOf('=');\n\n    // skip things that don't look like key=value\n    if (eq_idx < 0) {\n      continue;\n    }\n\n    var key = pair.substr(0, eq_idx).trim()\n    var val = pair.substr(++eq_idx, pair.length).trim();\n\n    // quoted values\n    if ('\"' == val[0]) {\n      val = val.slice(1, -1);\n    }\n\n    // only assign once\n    if (undefined == obj[key]) {\n      obj[key] = tryDecode(val, dec);\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n    if (isNaN(maxAge)) throw new Error('maxAge should be a Number');\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    if (typeof opt.expires.toUTCString !== 'function') {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + opt.expires.toUTCString();\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string'\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n\n\n//# sourceURL=webpack:///./node_modules/_cookie@0.4.0@cookie/index.js?")},"./src/main/index.js":
/*!***************************!*\
  !*** ./src/main/index.js ***!
  \***************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('/**\r\n* Tip:    主进程\r\n* Author: szm\r\n* Data:   2020-03-21\r\n**/\r\nconst {\r\n    BrowserWindow,\r\n    dialog\r\n} = __webpack_require__(/*! electron */ "electron");\r\nconst electron = __webpack_require__(/*! electron */ "electron");\r\nconst process = __webpack_require__(/*! process */ "process");\r\nconst url = __webpack_require__(/*! url */ "url");\r\nconst path = __webpack_require__(/*! path */ "path");\r\nconst cookie = __webpack_require__(/*! cookie */ "./node_modules/_cookie@0.4.0@cookie/index.js");\r\nconst devServerConfig = __webpack_require__(/*! ../../builder/devServerConfig.js */ "./builder/devServerConfig.js");\r\n\r\nconst devMode = process.env.NODE_ENV === "development";\r\nlet mainWindow = null;\r\n\r\nconst filter = {\r\n    urls: [\'http://*.kakayang.cn/*\']\r\n};\r\n\r\n//创建窗口\r\nfunction createWindow() {\r\n    // 首页路径，file协议,pathToFileURL得到编码过的URL\r\n    let wwwroot = global.wwwroot.path ? global.wwwroot.path : __dirname;\r\n    let filePath = url.pathToFileURL(path.join(wwwroot, \'index.html\')).href;\r\n    let indexUrl = `http://${devServerConfig.url}:${devServerConfig.port}/`;\r\n    let winW = electron.screen.getPrimaryDisplay().workAreaSize.width,\r\n        winH = electron.screen.getPrimaryDisplay().workAreaSize.height;\r\n    let config = {\r\n        title: "electron-vue-template",\r\n        width: winW <= 1240 ? winW : 1240,\r\n        height: winH <= 730 ? winH : 730,\r\n        minWidth: winW <= 1240 ? winW : 1240,\r\n        minHeight: winH <= 730 ? winH : 730,\r\n        show: true,\r\n        center: true,\r\n        simpleFullscreen: true,\r\n        resizable: process.platform === \'darwin\',\r\n        movable: true, //可否移动\r\n        minimizable: true, //可否最小化\r\n        maximizable: true, //可否最大化\r\n        fullscreen: false, //MAC下是否可以全屏\r\n        skipTaskbar: false, //在任务栏中显示窗口\r\n        acceptFirstMouse: true, //是否允许单击页面来激活窗口\r\n        closable: true,\r\n        backgroundColor: \'#fff\',\r\n        allowRunningInsecureContent: true,//允许一个 https 页面运行 http url 里的资源\r\n        webPreferences: {\r\n            devTools: true, //是否打开调试模式\r\n            webSecurity: false,//禁用安全策略\r\n            allowDisplayingInsecureContent: true,//允许一个使用 https的界面来展示由 http URLs 传过来的资源\r\n            allowRunningInsecureContent: true, //允许一个 https 页面运行 http url 里的资源\r\n            // preload: path.join(__dirname, \'preload.js\'),//预加载js\r\n            nodeIntegration: true//5.x以上版本，默认无法在渲染进程引入node模块，需要这里设置为true\r\n        }\r\n    };\r\n    mainWindow = new BrowserWindow(config);\r\n    global.windowIds.main = mainWindow.webContents.id;\r\n    // 开发环境使用http协议，生产环境使用file协议\r\n    mainWindow.loadURL(devMode ? encodeURI(indexUrl) : filePath);\r\n    //监听关闭\r\n    mainWindow.on(\'closed\', function () {\r\n        mainWindow = null;\r\n    }).on(\'close\', function (event) {\r\n        console.log(\'close\');\r\n        // 其他处理\r\n    }).on(\'ready-to-show\', function () {\r\n        mainWindow.show();\r\n    });\r\n\r\n    try {\r\n        if (mainWindow.webContents.debugger.isAttached()) mainWindow.webContents.debugger.detach("1.1");\r\n        mainWindow.webContents.debugger.attach("1.1");\r\n        mainWindow.webContents.debugger.sendCommand("Network.enable");\r\n    } catch (err) {\r\n        console.log("无法启动调试", err);\r\n        dialog.showErrorBox("get", "无法启动调试");\r\n    }\r\n    // 拦截请求并处理cookie\r\n    mainWindow.webContents.session.webRequest.onBeforeSendHeaders(filter, onBeforeSendHeaders);\r\n    mainWindow.webContents.session.webRequest.onHeadersReceived(filter, onHeadersReceived);\r\n    return mainWindow;\r\n}\r\nfunction onBeforeSendHeaders(details, callback) {\r\n    if (details.requestHeaders) {\r\n        details.requestHeaders[\'Cookie\'] = global.cookie;\r\n        details.requestHeaders[\'Origin\'] = details.url;\r\n        details.requestHeaders[\'Referer\'] = details.url;\r\n    }\r\n    callback({ requestHeaders: details.requestHeaders });\r\n}\r\nfunction onHeadersReceived(details, callback) {\r\n    let cookieArr = [];\r\n    for (let name in details.responseHeaders) {\r\n        if (name.toLocaleLowerCase() === \'Set-Cookie\'.toLocaleLowerCase()) {\r\n            cookieArr = details.responseHeaders[name];\r\n        }\r\n    }\r\n    let webCookie = "";\r\n    cookieArr instanceof Array && cookieArr.forEach(cookieItem => {\r\n        webCookie += cookieItem;\r\n    });\r\n    let webCookieObj = cookie.parse(webCookie);\r\n    let localCookieObj = cookie.parse(global.cookie || \'\');\r\n    let newCookie = Object.assign({}, localCookieObj, webCookieObj);\r\n    let cookieStr = "";\r\n    for (let name in newCookie) {\r\n        cookieStr += cookie.serialize(name, newCookie[name]) + ";";\r\n    }\r\n    global.cookie = cookieStr;\r\n    callback({ response: details.responseHeaders, statusLine: details.statusLine });\r\n}\r\nmodule.exports = {\r\n    create(_callback) {\r\n        if (mainWindow && !mainWindow.isDestroyed()) {\r\n            mainWindow.destroy();\r\n        }\r\n        mainWindow = createWindow();\r\n        if (_callback instanceof Function) _callback(mainWindow);\r\n        return mainWindow;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/main/index.js?')},"./src/main/main.js":
/*!**************************!*\
  !*** ./src/main/main.js ***!
  \**************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval("const { app, BrowserWindow, ipcMain } = __webpack_require__(/*! electron */ \"electron\");\r\nlet mainWindow = __webpack_require__(/*! ./index.js */ \"./src/main/index.js\");\r\n\r\n//注册全局变量\r\n// 页面跟路径配置，优先使用此配置，考虑到小版本更新时，版本之间的切换\r\nglobal.wwwroot = {\r\n    path: __dirname\r\n};\r\nglobal.cookie = \"\";\r\n//主窗口id，在创建主窗口的js中获取并修改此处\r\nglobal.windowIds = {\r\n    main: 0\r\n};\r\n\r\napp.on('ready', () => {\r\n     mainWindow.create();\r\n});\r\n\r\n//启动主窗体\r\nipcMain.on('create-main',(event,arg) => {\r\n    // h5页面指向指定版本\r\n    // global.wwwroot.path = arg.newVersionPath ? arg.newVersionPath : __dirname;\r\n    // if (arg.version) setVal('version','smallVersion', arg.version);\r\n    // indexWin.create();\r\n    mainWindow.destroy();\r\n});\r\n\r\napp.on('window-all-closed', function() {\r\n    setTimeout(() => {\r\n        let allwindow = BrowserWindow.getAllWindows();\r\n        if (allwindow.length === 0 ) app.exit(1);\r\n    }, 500);\r\n});\n\n//# sourceURL=webpack:///./src/main/main.js?")},0:
/*!********************************!*\
  !*** multi ./src/main/main.js ***!
  \********************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__(/*! ./src/main/main.js */"./src/main/main.js");\n\n\n//# sourceURL=webpack:///multi_./src/main/main.js?')},electron:
/*!***************************!*\
  !*** external "electron" ***!
  \***************************/
/*! no static exports found */function(module,exports){eval('module.exports = require("electron");\n\n//# sourceURL=webpack:///external_%22electron%22?')},path:
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/*! no static exports found */function(module,exports){eval('module.exports = require("path");\n\n//# sourceURL=webpack:///external_%22path%22?')},process:
/*!**************************!*\
  !*** external "process" ***!
  \**************************/
/*! no static exports found */function(module,exports){eval('module.exports = require("process");\n\n//# sourceURL=webpack:///external_%22process%22?')},url:
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/*! no static exports found */function(module,exports){eval('module.exports = require("url");\n\n//# sourceURL=webpack:///external_%22url%22?')}});